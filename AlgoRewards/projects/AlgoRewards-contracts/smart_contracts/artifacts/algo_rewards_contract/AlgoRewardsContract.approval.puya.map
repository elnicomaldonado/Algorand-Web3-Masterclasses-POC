{
  "version": 3,
  "sources": [
    "../../algo_rewards_contract/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;;AAqCK;;AAAA;AAAA;AAAA;;AAAA;AArCL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAqCK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA/BL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA+BK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA1BL;;;AAAA;;;AA0BK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAfL;;;AAAA;;;AAeK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AATL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AASK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAHL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAGK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAHL;;AAAA;;;;;;;;;AAGA;;;AAIe;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAA4C;;;;;;;;AAA5C;AAAA;;AAAA;AAAoE;;;;;;;;;;;;;;AAApE;AAAA;;AAAA;AAAoG;;;AAApG;AAAP;AAER;;;AAIe;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAA4C;AAA5C;AAAA;;AAAA;AAAgE;AAAhE;AAAA;;AAAA;AAA+F;AAA/F;AAAA;;AAAA;AAAmI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAnI;AAAP;AAER;;;AAGe;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAP;AAQR;;;AAGe;;;;;;;;;AAAA;;AAAA;AAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAnB;AAAP;AAER;;;AAIe;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAuC;AAAvC;AAAA;;AAAA;AAA2D;AAA3D;AAAA;;AAAA;AAA0F;AAA1F;AAAA;;AAAA;AAA8H;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA9H;AAAP;AAER;;;AAGe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAgD;;;;;;;;;AAAhD;AAAA;;AAAA;AAAyE;;;;;;;;;;;;;AAAzE;AAAA;;AAAA;AAAwG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAxG;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "bytecblock 0x151f7c75 \" (\" \") for \" \" with metadata: \""
    },
    "38": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "40": {
      "op": "bz main_bare_routing@12",
      "stack_out": []
    },
    "43": {
      "op": "pushbytess 0x8630a158 0x3472e806 0x15175ddc 0x281c98dd 0x02bece11 0xc552c5f5 0x07c031c7 // method \"create_session(string,string,string,string)string\", method \"claim_badge(string,string,string,string,string)string\", method \"get_session_info(string)string\", method \"check_claim_status(string,string)uint64\", method \"hello(string)string\", method \"mint_nft(string,string,string,string)string\", method \"prepare_nft_creation(string,string,string)string\"",
      "defined_out": [
        "Method(check_claim_status(string,string)uint64)",
        "Method(claim_badge(string,string,string,string,string)string)",
        "Method(create_session(string,string,string,string)string)",
        "Method(get_session_info(string)string)",
        "Method(hello(string)string)",
        "Method(mint_nft(string,string,string,string)string)",
        "Method(prepare_nft_creation(string,string,string)string)"
      ],
      "stack_out": [
        "Method(create_session(string,string,string,string)string)",
        "Method(claim_badge(string,string,string,string,string)string)",
        "Method(get_session_info(string)string)",
        "Method(check_claim_status(string,string)uint64)",
        "Method(hello(string)string)",
        "Method(mint_nft(string,string,string,string)string)",
        "Method(prepare_nft_creation(string,string,string)string)"
      ]
    },
    "80": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(check_claim_status(string,string)uint64)",
        "Method(claim_badge(string,string,string,string,string)string)",
        "Method(create_session(string,string,string,string)string)",
        "Method(get_session_info(string)string)",
        "Method(hello(string)string)",
        "Method(mint_nft(string,string,string,string)string)",
        "Method(prepare_nft_creation(string,string,string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_session(string,string,string,string)string)",
        "Method(claim_badge(string,string,string,string,string)string)",
        "Method(get_session_info(string)string)",
        "Method(check_claim_status(string,string)uint64)",
        "Method(hello(string)string)",
        "Method(mint_nft(string,string,string,string)string)",
        "Method(prepare_nft_creation(string,string,string)string)",
        "tmp%2#0"
      ]
    },
    "83": {
      "op": "match main_create_session_route@3 main_claim_badge_route@4 main_get_session_info_route@5 main_check_claim_status_route@6 main_hello_route@7 main_mint_nft_route@8 main_prepare_nft_creation_route@9",
      "stack_out": []
    },
    "99": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "101": {
      "op": "return",
      "stack_out": []
    },
    "102": {
      "block": "main_prepare_nft_creation_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "104": {
      "op": "!",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "105": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "106": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "108": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "109": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "112": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "115": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%72#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "tmp%73#0"
      ]
    },
    "118": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%72#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "tmp%74#0"
      ]
    },
    "121": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%72#0",
        "tmp%74#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "tmp%74#0",
        "tmp%75#0"
      ]
    },
    "124": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%72#0",
        "tmp%74#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "tmp%74#0",
        "tmp%76#0"
      ]
    },
    "127": {
      "callsub": "smart_contracts.algo_rewards_contract.contract.AlgoRewardsContract.prepare_nft_creation",
      "op": "callsub prepare_nft_creation",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "130": {
      "op": "dup",
      "defined_out": [
        "to_encode%6#0",
        "to_encode%6#0 (copy)"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%6#0 (copy)"
      ]
    },
    "131": {
      "op": "len",
      "defined_out": [
        "length%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "length%5#0"
      ]
    },
    "132": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "as_bytes%5#0"
      ]
    },
    "133": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "length_uint16%5#0"
      ]
    },
    "136": {
      "op": "swap",
      "stack_out": [
        "length_uint16%5#0",
        "to_encode%6#0"
      ]
    },
    "137": {
      "op": "concat",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "138": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "0x151f7c75"
      ]
    },
    "139": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ]
    },
    "140": {
      "op": "concat",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "141": {
      "op": "log",
      "stack_out": []
    },
    "142": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "143": {
      "op": "return",
      "stack_out": []
    },
    "144": {
      "block": "main_mint_nft_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "146": {
      "op": "!",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "147": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "148": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "150": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "151": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "154": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "157": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%59#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0"
      ]
    },
    "160": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%59#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%61#0"
      ]
    },
    "163": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%59#0",
        "tmp%61#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%61#0",
        "tmp%62#0"
      ]
    },
    "166": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%59#0",
        "tmp%61#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%61#0",
        "tmp%63#0"
      ]
    },
    "169": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%59#0",
        "tmp%61#0",
        "tmp%63#0",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%61#0",
        "tmp%63#0",
        "tmp%64#0"
      ]
    },
    "172": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%59#0",
        "tmp%61#0",
        "tmp%63#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%61#0",
        "tmp%63#0",
        "tmp%65#0"
      ]
    },
    "175": {
      "callsub": "smart_contracts.algo_rewards_contract.contract.AlgoRewardsContract.mint_nft",
      "op": "callsub mint_nft",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "178": {
      "op": "dup",
      "defined_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ]
    },
    "179": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length%4#0"
      ]
    },
    "180": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "as_bytes%4#0"
      ]
    },
    "181": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length_uint16%4#0"
      ]
    },
    "184": {
      "op": "swap",
      "stack_out": [
        "length_uint16%4#0",
        "to_encode%5#0"
      ]
    },
    "185": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0"
      ]
    },
    "186": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "0x151f7c75"
      ]
    },
    "187": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ]
    },
    "188": {
      "op": "concat",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "189": {
      "op": "log",
      "stack_out": []
    },
    "190": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "191": {
      "op": "return",
      "stack_out": []
    },
    "192": {
      "block": "main_hello_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "194": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "195": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "196": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "198": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "199": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "202": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "205": {
      "callsub": "smart_contracts.algo_rewards_contract.contract.AlgoRewardsContract.hello",
      "op": "callsub hello",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "208": {
      "op": "dup",
      "defined_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ]
    },
    "209": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "length%3#0"
      ]
    },
    "210": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "as_bytes%3#0"
      ]
    },
    "211": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "length_uint16%3#0"
      ]
    },
    "214": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%4#0"
      ]
    },
    "215": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "216": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "217": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "218": {
      "op": "concat",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "219": {
      "op": "log",
      "stack_out": []
    },
    "220": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "221": {
      "op": "return",
      "stack_out": []
    },
    "222": {
      "block": "main_check_claim_status_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "224": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "225": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "226": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "228": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "229": {
      "op": "pushbytes 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000"
      ]
    },
    "243": {
      "op": "log",
      "stack_out": []
    },
    "244": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "245": {
      "op": "return",
      "stack_out": []
    },
    "246": {
      "block": "main_get_session_info_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "248": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "249": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "250": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "252": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "253": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "256": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "259": {
      "callsub": "smart_contracts.algo_rewards_contract.contract.AlgoRewardsContract.get_session_info",
      "op": "callsub get_session_info",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "262": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "263": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%2#0"
      ]
    },
    "264": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%2#0"
      ]
    },
    "265": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%2#0"
      ]
    },
    "268": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ]
    },
    "269": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "270": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "271": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "272": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "273": {
      "op": "log",
      "stack_out": []
    },
    "274": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "275": {
      "op": "return",
      "stack_out": []
    },
    "276": {
      "block": "main_claim_badge_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "278": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "279": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "280": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "282": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "283": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "286": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "289": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "292": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "295": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "298": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "301": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "304": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "307": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "310": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0"
      ]
    },
    "313": {
      "callsub": "smart_contracts.algo_rewards_contract.contract.AlgoRewardsContract.claim_badge",
      "op": "callsub claim_badge",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "316": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "317": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "318": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "319": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "322": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "323": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "324": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "325": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "326": {
      "op": "concat",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "327": {
      "op": "log",
      "stack_out": []
    },
    "328": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "329": {
      "op": "return",
      "stack_out": []
    },
    "330": {
      "block": "main_create_session_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "332": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "333": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "334": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "336": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "337": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "340": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "343": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "346": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "349": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "352": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "355": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "358": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "361": {
      "callsub": "smart_contracts.algo_rewards_contract.contract.AlgoRewardsContract.create_session",
      "op": "callsub create_session",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "364": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "365": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "366": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "367": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "370": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "371": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "372": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "373": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "374": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "375": {
      "op": "log",
      "stack_out": []
    },
    "376": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "377": {
      "op": "return",
      "stack_out": []
    },
    "378": {
      "block": "main_bare_routing@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "380": {
      "op": "bnz main_after_if_else@16",
      "stack_out": []
    },
    "383": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "385": {
      "op": "!",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "386": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "387": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "388": {
      "op": "return",
      "stack_out": []
    },
    "389": {
      "subroutine": "smart_contracts.algo_rewards_contract.contract.AlgoRewardsContract.create_session",
      "params": {
        "session_id#0": "bytes",
        "session_name#0": "bytes",
        "session_description#0": "bytes",
        "metadata_url#0": "bytes"
      },
      "block": "create_session",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "392": {
      "op": "pushbytes \"Phase4 Session created: \"",
      "defined_out": [
        "\"Phase4 Session created: \""
      ],
      "stack_out": [
        "\"Phase4 Session created: \""
      ]
    },
    "418": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"Phase4 Session created: \"",
        "session_name#0 (copy)"
      ],
      "stack_out": [
        "\"Phase4 Session created: \"",
        "session_name#0 (copy)"
      ]
    },
    "420": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "421": {
      "op": "pushbytes \" (ID: \"",
      "defined_out": [
        "\" (ID: \"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\" (ID: \""
      ]
    },
    "429": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "430": {
      "op": "frame_dig -4",
      "defined_out": [
        "session_id#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "session_id#0 (copy)"
      ]
    },
    "432": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "433": {
      "op": "pushbytes \", Metadata: \"",
      "defined_out": [
        "\", Metadata: \"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\", Metadata: \""
      ]
    },
    "447": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "448": {
      "op": "frame_dig -1",
      "defined_out": [
        "metadata_url#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "metadata_url#0 (copy)"
      ]
    },
    "450": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "451": {
      "op": "pushbytes \")\"",
      "defined_out": [
        "\")\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\")\""
      ]
    },
    "454": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "455": {
      "retsub": true,
      "op": "retsub"
    },
    "456": {
      "subroutine": "smart_contracts.algo_rewards_contract.contract.AlgoRewardsContract.claim_badge",
      "params": {
        "session_id#0": "bytes",
        "recipient_address#0": "bytes",
        "asset_name#0": "bytes",
        "asset_unit#0": "bytes",
        "metadata_url#0": "bytes"
      },
      "block": "claim_badge",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "459": {
      "op": "pushbytes \"Phase4 NFT Badge created: \"",
      "defined_out": [
        "\"Phase4 NFT Badge created: \""
      ],
      "stack_out": [
        "\"Phase4 NFT Badge created: \""
      ]
    },
    "487": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"Phase4 NFT Badge created: \"",
        "asset_name#0 (copy)"
      ],
      "stack_out": [
        "\"Phase4 NFT Badge created: \"",
        "asset_name#0 (copy)"
      ]
    },
    "489": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "490": {
      "op": "bytec_1 // \" (\"",
      "defined_out": [
        "\" (\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\" (\""
      ]
    },
    "491": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "492": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_unit#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "asset_unit#0 (copy)"
      ]
    },
    "494": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "495": {
      "op": "bytec_2 // \") for \"",
      "defined_out": [
        "\") for \"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\") for \""
      ]
    },
    "496": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "497": {
      "op": "frame_dig -4",
      "defined_out": [
        "recipient_address#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "recipient_address#0 (copy)"
      ]
    },
    "499": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "500": {
      "op": "bytec_3 // \" with metadata: \"",
      "defined_out": [
        "\" with metadata: \"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\" with metadata: \""
      ]
    },
    "501": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "502": {
      "op": "frame_dig -1",
      "defined_out": [
        "metadata_url#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "metadata_url#0 (copy)"
      ]
    },
    "504": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "505": {
      "op": "pushbytes \" - READY FOR REAL NFT MINTING\"",
      "defined_out": [
        "\" - READY FOR REAL NFT MINTING\"",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "\" - READY FOR REAL NFT MINTING\""
      ]
    },
    "536": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "537": {
      "retsub": true,
      "op": "retsub"
    },
    "538": {
      "subroutine": "smart_contracts.algo_rewards_contract.contract.AlgoRewardsContract.get_session_info",
      "params": {
        "session_id#0": "bytes"
      },
      "block": "get_session_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "541": {
      "op": "pushbytes \"Phase4 Session info for: \"",
      "defined_out": [
        "\"Phase4 Session info for: \""
      ],
      "stack_out": [
        "\"Phase4 Session info for: \""
      ]
    },
    "568": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Phase4 Session info for: \"",
        "session_id#0 (copy)"
      ],
      "stack_out": [
        "\"Phase4 Session info for: \"",
        "session_id#0 (copy)"
      ]
    },
    "570": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "571": {
      "retsub": true,
      "op": "retsub"
    },
    "572": {
      "subroutine": "smart_contracts.algo_rewards_contract.contract.AlgoRewardsContract.hello",
      "params": {
        "name#0": "bytes"
      },
      "block": "hello",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "575": {
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \""
      ],
      "stack_out": [
        "\"Hello, \""
      ]
    },
    "584": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Hello, \"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"Hello, \"",
        "name#0 (copy)"
      ]
    },
    "586": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "587": {
      "op": "pushbytes \" - Phase 4 AlgoRewards with Enhanced Features\"",
      "defined_out": [
        "\" - Phase 4 AlgoRewards with Enhanced Features\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\" - Phase 4 AlgoRewards with Enhanced Features\""
      ]
    },
    "634": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "635": {
      "retsub": true,
      "op": "retsub"
    },
    "636": {
      "subroutine": "smart_contracts.algo_rewards_contract.contract.AlgoRewardsContract.mint_nft",
      "params": {
        "asset_name#0": "bytes",
        "asset_unit#0": "bytes",
        "metadata_url#0": "bytes",
        "recipient_address#0": "bytes"
      },
      "block": "mint_nft",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "639": {
      "op": "pushbytes \"Phase4 NFT Prepared: \"",
      "defined_out": [
        "\"Phase4 NFT Prepared: \""
      ],
      "stack_out": [
        "\"Phase4 NFT Prepared: \""
      ]
    },
    "662": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"Phase4 NFT Prepared: \"",
        "asset_name#0 (copy)"
      ],
      "stack_out": [
        "\"Phase4 NFT Prepared: \"",
        "asset_name#0 (copy)"
      ]
    },
    "664": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "665": {
      "op": "bytec_1 // \" (\"",
      "defined_out": [
        "\" (\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\" (\""
      ]
    },
    "666": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "667": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset_unit#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "asset_unit#0 (copy)"
      ]
    },
    "669": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "670": {
      "op": "bytec_2 // \") for \"",
      "defined_out": [
        "\") for \"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\") for \""
      ]
    },
    "671": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "672": {
      "op": "frame_dig -1",
      "defined_out": [
        "recipient_address#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "recipient_address#0 (copy)"
      ]
    },
    "674": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "675": {
      "op": "bytec_3 // \" with metadata: \"",
      "defined_out": [
        "\" with metadata: \"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\" with metadata: \""
      ]
    },
    "676": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "677": {
      "op": "frame_dig -2",
      "defined_out": [
        "metadata_url#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "metadata_url#0 (copy)"
      ]
    },
    "679": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "680": {
      "op": "pushbytes \" - CONTRACT READY FOR REAL NFT MINTING\"",
      "defined_out": [
        "\" - CONTRACT READY FOR REAL NFT MINTING\"",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "\" - CONTRACT READY FOR REAL NFT MINTING\""
      ]
    },
    "720": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "721": {
      "retsub": true,
      "op": "retsub"
    },
    "722": {
      "subroutine": "smart_contracts.algo_rewards_contract.contract.AlgoRewardsContract.prepare_nft_creation",
      "params": {
        "asset_name#0": "bytes",
        "asset_unit#0": "bytes",
        "metadata_url#0": "bytes"
      },
      "block": "prepare_nft_creation",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "725": {
      "op": "pushbytes \"NFT Creation Parameters: Name=\"",
      "defined_out": [
        "\"NFT Creation Parameters: Name=\""
      ],
      "stack_out": [
        "\"NFT Creation Parameters: Name=\""
      ]
    },
    "757": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"NFT Creation Parameters: Name=\"",
        "asset_name#0 (copy)"
      ],
      "stack_out": [
        "\"NFT Creation Parameters: Name=\"",
        "asset_name#0 (copy)"
      ]
    },
    "759": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "760": {
      "op": "pushbytes \", Unit=\"",
      "defined_out": [
        "\", Unit=\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\", Unit=\""
      ]
    },
    "769": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "770": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_unit#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "asset_unit#0 (copy)"
      ]
    },
    "772": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "773": {
      "op": "pushbytes \", Metadata=\"",
      "defined_out": [
        "\", Metadata=\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\", Metadata=\""
      ]
    },
    "786": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "787": {
      "op": "frame_dig -1",
      "defined_out": [
        "metadata_url#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "metadata_url#0 (copy)"
      ]
    },
    "789": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "790": {
      "op": "pushbytes \" - READY FOR ASSET CREATION\"",
      "defined_out": [
        "\" - READY FOR ASSET CREATION\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\" - READY FOR ASSET CREATION\""
      ]
    },
    "819": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "820": {
      "retsub": true,
      "op": "retsub"
    }
  }
}