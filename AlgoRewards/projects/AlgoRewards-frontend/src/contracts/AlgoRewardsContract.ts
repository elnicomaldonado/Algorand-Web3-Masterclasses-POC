/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AlgoRewardsContract","structs":{},"methods":[{"name":"create_session","args":[{"type":"string","name":"session_id"},{"type":"string","name":"session_name"},{"type":"string","name":"session_description"},{"type":"string","name":"metadata_url"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new session - Phase 4 enhanced version","events":[],"recommendations":{}},{"name":"claim_badge","args":[{"type":"string","name":"session_id"},{"type":"string","name":"recipient_address"},{"type":"string","name":"asset_name"},{"type":"string","name":"asset_unit"},{"type":"string","name":"metadata_url"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Claim a badge for attending a session - Phase 4 enhanced version","events":[],"recommendations":{}},{"name":"get_session_info","args":[{"type":"string","name":"session_id"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get session information","events":[],"recommendations":{}},{"name":"check_claim_status","args":[{"type":"string","name":"session_id"},{"type":"string","name":"recipient_address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Check if address has claimed badge for session","events":[],"recommendations":{}},{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Keep the original hello method for compatibility","events":[],"recommendations":{}},{"name":"mint_nft","args":[{"type":"string","name":"asset_name"},{"type":"string","name":"asset_unit"},{"type":"string","name":"metadata_url"},{"type":"string","name":"recipient_address"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Direct NFT minting method for Phase 4 - PREPARES FOR REAL NFT CREATION","events":[],"recommendations":{}},{"name":"prepare_nft_creation","args":[{"type":"string","name":"asset_name"},{"type":"string","name":"asset_unit"},{"type":"string","name":"metadata_url"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Prepare NFT creation parameters - Phase 4 method","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"AlgoRewards - POAP-style NFT minting contract for event attendance - Phase 4 with Enhanced Features","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[105,147,195,225,249,279,333],"errorMessage":"OnCompletion is not NoOp"},{"pc":[386],"errorMessage":"can only call when creating"},{"pc":[108,150,198,228,252,282,336],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiABASYEBBUffHUCICgGKSBmb3IgECB3aXRoIG1ldGFkYXRhOiAxG0EBT4IHBIYwoVgENHLoBgQVF13cBCgcmN0EAr7OEQTFUsX1BAfAMcc2GgCOBwDnALEAkwB7AF0ALQADgQBDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCAIgCUEkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCAIgBykkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCAIgBbEkVFlcGAkxQKExQsCJDMRkURDEYRIAMFR98dQAAAAAAAAAAsCJDMRkURDEYRDYaAVcCAIgBFEkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCADYaBVcCAIgAjEkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCAIgAGUkVFlcGAkxQKExQsCJDMRlA/uQxGBREIkOKBAGAGFBoYXNlNCBTZXNzaW9uIGNyZWF0ZWQ6IIv9UIAGIChJRDogUIv8UIAMLCBNZXRhZGF0YTogUIv/UIABKVCJigUBgBpQaGFzZTQgTkZUIEJhZGdlIGNyZWF0ZWQ6IIv9UClQi/5QKlCL/FArUIv/UIAdIC0gUkVBRFkgRk9SIFJFQUwgTkZUIE1JTlRJTkdQiYoBAYAZUGhhc2U0IFNlc3Npb24gaW5mbyBmb3I6IIv/UImKAQGAB0hlbGxvLCCL/1CALSAtIFBoYXNlIDQgQWxnb1Jld2FyZHMgd2l0aCBFbmhhbmNlZCBGZWF0dXJlc1CJigQBgBVQaGFzZTQgTkZUIFByZXBhcmVkOiCL/FApUIv9UCpQi/9QK1CL/lCAJiAtIENPTlRSQUNUIFJFQURZIEZPUiBSRUFMIE5GVCBNSU5USU5HUImKAwGAHk5GVCBDcmVhdGlvbiBQYXJhbWV0ZXJzOiBOYW1lPYv9UIAHLCBVbml0PVCL/lCACywgTWV0YWRhdGE9UIv/UIAbIC0gUkVBRFkgRk9SIEFTU0VUIENSRUFUSU9OUIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AlgoRewardsContract contract
 */
export type AlgoRewardsContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_session(string,string,string,string)string': {
      sessionId: string
      sessionName: string
      sessionDescription: string
      metadataUrl: string
    }
    'claim_badge(string,string,string,string,string)string': {
      sessionId: string
      recipientAddress: string
      assetName: string
      assetUnit: string
      metadataUrl: string
    }
    'get_session_info(string)string': {
      sessionId: string
    }
    'check_claim_status(string,string)uint64': {
      sessionId: string
      recipientAddress: string
    }
    'hello(string)string': {
      name: string
    }
    'mint_nft(string,string,string,string)string': {
      assetName: string
      assetUnit: string
      metadataUrl: string
      recipientAddress: string
    }
    'prepare_nft_creation(string,string,string)string': {
      assetName: string
      assetUnit: string
      metadataUrl: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_session(string,string,string,string)string': [sessionId: string, sessionName: string, sessionDescription: string, metadataUrl: string]
    'claim_badge(string,string,string,string,string)string': [sessionId: string, recipientAddress: string, assetName: string, assetUnit: string, metadataUrl: string]
    'get_session_info(string)string': [sessionId: string]
    'check_claim_status(string,string)uint64': [sessionId: string, recipientAddress: string]
    'hello(string)string': [name: string]
    'mint_nft(string,string,string,string)string': [assetName: string, assetUnit: string, metadataUrl: string, recipientAddress: string]
    'prepare_nft_creation(string,string,string)string': [assetName: string, assetUnit: string, metadataUrl: string]
  }
}

/**
 * The return type for each method
 */
export type AlgoRewardsContractReturns = {
  'create_session(string,string,string,string)string': string
  'claim_badge(string,string,string,string,string)string': string
  'get_session_info(string)string': string
  'check_claim_status(string,string)uint64': bigint
  'hello(string)string': string
  'mint_nft(string,string,string,string)string': string
  'prepare_nft_creation(string,string,string)string': string
}

/**
 * Defines the types of available calls and state of the AlgoRewardsContract smart contract.
 */
export type AlgoRewardsContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_session(string,string,string,string)string' | 'create_session', {
      argsObj: AlgoRewardsContractArgs['obj']['create_session(string,string,string,string)string']
      argsTuple: AlgoRewardsContractArgs['tuple']['create_session(string,string,string,string)string']
      returns: AlgoRewardsContractReturns['create_session(string,string,string,string)string']
    }>
    & Record<'claim_badge(string,string,string,string,string)string' | 'claim_badge', {
      argsObj: AlgoRewardsContractArgs['obj']['claim_badge(string,string,string,string,string)string']
      argsTuple: AlgoRewardsContractArgs['tuple']['claim_badge(string,string,string,string,string)string']
      returns: AlgoRewardsContractReturns['claim_badge(string,string,string,string,string)string']
    }>
    & Record<'get_session_info(string)string' | 'get_session_info', {
      argsObj: AlgoRewardsContractArgs['obj']['get_session_info(string)string']
      argsTuple: AlgoRewardsContractArgs['tuple']['get_session_info(string)string']
      returns: AlgoRewardsContractReturns['get_session_info(string)string']
    }>
    & Record<'check_claim_status(string,string)uint64' | 'check_claim_status', {
      argsObj: AlgoRewardsContractArgs['obj']['check_claim_status(string,string)uint64']
      argsTuple: AlgoRewardsContractArgs['tuple']['check_claim_status(string,string)uint64']
      returns: AlgoRewardsContractReturns['check_claim_status(string,string)uint64']
    }>
    & Record<'hello(string)string' | 'hello', {
      argsObj: AlgoRewardsContractArgs['obj']['hello(string)string']
      argsTuple: AlgoRewardsContractArgs['tuple']['hello(string)string']
      returns: AlgoRewardsContractReturns['hello(string)string']
    }>
    & Record<'mint_nft(string,string,string,string)string' | 'mint_nft', {
      argsObj: AlgoRewardsContractArgs['obj']['mint_nft(string,string,string,string)string']
      argsTuple: AlgoRewardsContractArgs['tuple']['mint_nft(string,string,string,string)string']
      returns: AlgoRewardsContractReturns['mint_nft(string,string,string,string)string']
    }>
    & Record<'prepare_nft_creation(string,string,string)string' | 'prepare_nft_creation', {
      argsObj: AlgoRewardsContractArgs['obj']['prepare_nft_creation(string,string,string)string']
      argsTuple: AlgoRewardsContractArgs['tuple']['prepare_nft_creation(string,string,string)string']
      returns: AlgoRewardsContractReturns['prepare_nft_creation(string,string,string)string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type AlgoRewardsContractSignatures = keyof AlgoRewardsContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AlgoRewardsContractNonVoidMethodSignatures = keyof AlgoRewardsContractTypes['methods'] extends infer T ? T extends keyof AlgoRewardsContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AlgoRewardsContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AlgoRewardsContractSignatures> = AlgoRewardsContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AlgoRewardsContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgoRewardsContractSignatures> = AlgoRewardsContractTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type AlgoRewardsContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgoRewardsContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AlgoRewardsContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AlgoRewardsContract smart contract
 */
export abstract class AlgoRewardsContractParamsFactory {
  /**
   * Constructs a no op call for the create_session(string,string,string,string)string ABI method
   *
   * Create a new session - Phase 4 enhanced version
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createSession(params: CallParams<AlgoRewardsContractArgs['obj']['create_session(string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['create_session(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_session(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sessionId, params.args.sessionName, params.args.sessionDescription, params.args.metadataUrl],
    }
  }
  /**
   * Constructs a no op call for the claim_badge(string,string,string,string,string)string ABI method
   *
   * Claim a badge for attending a session - Phase 4 enhanced version
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimBadge(params: CallParams<AlgoRewardsContractArgs['obj']['claim_badge(string,string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['claim_badge(string,string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claim_badge(string,string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sessionId, params.args.recipientAddress, params.args.assetName, params.args.assetUnit, params.args.metadataUrl],
    }
  }
  /**
   * Constructs a no op call for the get_session_info(string)string ABI method
   *
   * Get session information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getSessionInfo(params: CallParams<AlgoRewardsContractArgs['obj']['get_session_info(string)string'] | AlgoRewardsContractArgs['tuple']['get_session_info(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_session_info(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sessionId],
    }
  }
  /**
   * Constructs a no op call for the check_claim_status(string,string)uint64 ABI method
   *
   * Check if address has claimed badge for session
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkClaimStatus(params: CallParams<AlgoRewardsContractArgs['obj']['check_claim_status(string,string)uint64'] | AlgoRewardsContractArgs['tuple']['check_claim_status(string,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'check_claim_status(string,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sessionId, params.args.recipientAddress],
    }
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * Keep the original hello method for compatibility
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<AlgoRewardsContractArgs['obj']['hello(string)string'] | AlgoRewardsContractArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the mint_nft(string,string,string,string)string ABI method
   *
   * Direct NFT minting method for Phase 4 - PREPARES FOR REAL NFT CREATION
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintNft(params: CallParams<AlgoRewardsContractArgs['obj']['mint_nft(string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['mint_nft(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint_nft(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetName, params.args.assetUnit, params.args.metadataUrl, params.args.recipientAddress],
    }
  }
  /**
   * Constructs a no op call for the prepare_nft_creation(string,string,string)string ABI method
   *
   * Prepare NFT creation parameters - Phase 4 method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static prepareNftCreation(params: CallParams<AlgoRewardsContractArgs['obj']['prepare_nft_creation(string,string,string)string'] | AlgoRewardsContractArgs['tuple']['prepare_nft_creation(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'prepare_nft_creation(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetName, params.args.assetUnit, params.args.metadataUrl],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AlgoRewardsContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AlgoRewardsContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AlgoRewardsContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AlgoRewardsContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AlgoRewardsContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AlgoRewardsContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AlgoRewardsContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AlgoRewardsContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoRewardsContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoRewardsContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoRewardsContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AlgoRewardsContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AlgoRewardsContract smart contract
 */
export class AlgoRewardsContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AlgoRewardsContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AlgoRewardsContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AlgoRewardsContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AlgoRewardsContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AlgoRewardsContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AlgoRewardsContractClient> {
    return new AlgoRewardsContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AlgoRewardsContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AlgoRewardsContractClient> {
    return new AlgoRewardsContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AlgoRewardsContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `create_session(string,string,string,string)string` ABI method.
     *
     * Create a new session - Phase 4 enhanced version
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createSession: (params: CallParams<AlgoRewardsContractArgs['obj']['create_session(string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['create_session(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoRewardsContractParamsFactory.createSession(params))
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `claim_badge(string,string,string,string,string)string` ABI method.
     *
     * Claim a badge for attending a session - Phase 4 enhanced version
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimBadge: (params: CallParams<AlgoRewardsContractArgs['obj']['claim_badge(string,string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['claim_badge(string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoRewardsContractParamsFactory.claimBadge(params))
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `get_session_info(string)string` ABI method.
     *
     * Get session information
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getSessionInfo: (params: CallParams<AlgoRewardsContractArgs['obj']['get_session_info(string)string'] | AlgoRewardsContractArgs['tuple']['get_session_info(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoRewardsContractParamsFactory.getSessionInfo(params))
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `check_claim_status(string,string)uint64` ABI method.
     *
     * Check if address has claimed badge for session
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkClaimStatus: (params: CallParams<AlgoRewardsContractArgs['obj']['check_claim_status(string,string)uint64'] | AlgoRewardsContractArgs['tuple']['check_claim_status(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoRewardsContractParamsFactory.checkClaimStatus(params))
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `hello(string)string` ABI method.
     *
     * Keep the original hello method for compatibility
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<AlgoRewardsContractArgs['obj']['hello(string)string'] | AlgoRewardsContractArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoRewardsContractParamsFactory.hello(params))
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `mint_nft(string,string,string,string)string` ABI method.
     *
     * Direct NFT minting method for Phase 4 - PREPARES FOR REAL NFT CREATION
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintNft: (params: CallParams<AlgoRewardsContractArgs['obj']['mint_nft(string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['mint_nft(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoRewardsContractParamsFactory.mintNft(params))
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `prepare_nft_creation(string,string,string)string` ABI method.
     *
     * Prepare NFT creation parameters - Phase 4 method
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    prepareNftCreation: (params: CallParams<AlgoRewardsContractArgs['obj']['prepare_nft_creation(string,string,string)string'] | AlgoRewardsContractArgs['tuple']['prepare_nft_creation(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoRewardsContractParamsFactory.prepareNftCreation(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AlgoRewardsContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `create_session(string,string,string,string)string` ABI method.
     *
     * Create a new session - Phase 4 enhanced version
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createSession: (params: CallParams<AlgoRewardsContractArgs['obj']['create_session(string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['create_session(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoRewardsContractParamsFactory.createSession(params))
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `claim_badge(string,string,string,string,string)string` ABI method.
     *
     * Claim a badge for attending a session - Phase 4 enhanced version
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimBadge: (params: CallParams<AlgoRewardsContractArgs['obj']['claim_badge(string,string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['claim_badge(string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoRewardsContractParamsFactory.claimBadge(params))
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `get_session_info(string)string` ABI method.
     *
     * Get session information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getSessionInfo: (params: CallParams<AlgoRewardsContractArgs['obj']['get_session_info(string)string'] | AlgoRewardsContractArgs['tuple']['get_session_info(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoRewardsContractParamsFactory.getSessionInfo(params))
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `check_claim_status(string,string)uint64` ABI method.
     *
     * Check if address has claimed badge for session
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkClaimStatus: (params: CallParams<AlgoRewardsContractArgs['obj']['check_claim_status(string,string)uint64'] | AlgoRewardsContractArgs['tuple']['check_claim_status(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoRewardsContractParamsFactory.checkClaimStatus(params))
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `hello(string)string` ABI method.
     *
     * Keep the original hello method for compatibility
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<AlgoRewardsContractArgs['obj']['hello(string)string'] | AlgoRewardsContractArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoRewardsContractParamsFactory.hello(params))
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `mint_nft(string,string,string,string)string` ABI method.
     *
     * Direct NFT minting method for Phase 4 - PREPARES FOR REAL NFT CREATION
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintNft: (params: CallParams<AlgoRewardsContractArgs['obj']['mint_nft(string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['mint_nft(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoRewardsContractParamsFactory.mintNft(params))
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `prepare_nft_creation(string,string,string)string` ABI method.
     *
     * Prepare NFT creation parameters - Phase 4 method
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    prepareNftCreation: (params: CallParams<AlgoRewardsContractArgs['obj']['prepare_nft_creation(string,string,string)string'] | AlgoRewardsContractArgs['tuple']['prepare_nft_creation(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoRewardsContractParamsFactory.prepareNftCreation(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AlgoRewardsContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `create_session(string,string,string,string)string` ABI method.
     *
     * Create a new session - Phase 4 enhanced version
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createSession: async (params: CallParams<AlgoRewardsContractArgs['obj']['create_session(string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['create_session(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoRewardsContractParamsFactory.createSession(params))
      return {...result, return: result.return as unknown as (undefined | AlgoRewardsContractReturns['create_session(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `claim_badge(string,string,string,string,string)string` ABI method.
     *
     * Claim a badge for attending a session - Phase 4 enhanced version
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimBadge: async (params: CallParams<AlgoRewardsContractArgs['obj']['claim_badge(string,string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['claim_badge(string,string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoRewardsContractParamsFactory.claimBadge(params))
      return {...result, return: result.return as unknown as (undefined | AlgoRewardsContractReturns['claim_badge(string,string,string,string,string)string'])}
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `get_session_info(string)string` ABI method.
     *
     * Get session information
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getSessionInfo: async (params: CallParams<AlgoRewardsContractArgs['obj']['get_session_info(string)string'] | AlgoRewardsContractArgs['tuple']['get_session_info(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoRewardsContractParamsFactory.getSessionInfo(params))
      return {...result, return: result.return as unknown as (undefined | AlgoRewardsContractReturns['get_session_info(string)string'])}
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `check_claim_status(string,string)uint64` ABI method.
     *
     * Check if address has claimed badge for session
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkClaimStatus: async (params: CallParams<AlgoRewardsContractArgs['obj']['check_claim_status(string,string)uint64'] | AlgoRewardsContractArgs['tuple']['check_claim_status(string,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoRewardsContractParamsFactory.checkClaimStatus(params))
      return {...result, return: result.return as unknown as (undefined | AlgoRewardsContractReturns['check_claim_status(string,string)uint64'])}
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `hello(string)string` ABI method.
     *
     * Keep the original hello method for compatibility
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<AlgoRewardsContractArgs['obj']['hello(string)string'] | AlgoRewardsContractArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoRewardsContractParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | AlgoRewardsContractReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `mint_nft(string,string,string,string)string` ABI method.
     *
     * Direct NFT minting method for Phase 4 - PREPARES FOR REAL NFT CREATION
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintNft: async (params: CallParams<AlgoRewardsContractArgs['obj']['mint_nft(string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['mint_nft(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoRewardsContractParamsFactory.mintNft(params))
      return {...result, return: result.return as unknown as (undefined | AlgoRewardsContractReturns['mint_nft(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the AlgoRewardsContract smart contract using the `prepare_nft_creation(string,string,string)string` ABI method.
     *
     * Prepare NFT creation parameters - Phase 4 method
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    prepareNftCreation: async (params: CallParams<AlgoRewardsContractArgs['obj']['prepare_nft_creation(string,string,string)string'] | AlgoRewardsContractArgs['tuple']['prepare_nft_creation(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoRewardsContractParamsFactory.prepareNftCreation(params))
      return {...result, return: result.return as unknown as (undefined | AlgoRewardsContractReturns['prepare_nft_creation(string,string,string)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AlgoRewardsContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AlgoRewardsContract app
   */
  state = {
  }

  public newGroup(): AlgoRewardsContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_session(string,string,string,string)string method call against the AlgoRewardsContract contract
       */
      createSession(params: CallParams<AlgoRewardsContractArgs['obj']['create_session(string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['create_session(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createSession(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_session(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a claim_badge(string,string,string,string,string)string method call against the AlgoRewardsContract contract
       */
      claimBadge(params: CallParams<AlgoRewardsContractArgs['obj']['claim_badge(string,string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['claim_badge(string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimBadge(params)))
        resultMappers.push((v) => client.decodeReturnValue('claim_badge(string,string,string,string,string)string', v))
        return this
      },
      /**
       * Add a get_session_info(string)string method call against the AlgoRewardsContract contract
       */
      getSessionInfo(params: CallParams<AlgoRewardsContractArgs['obj']['get_session_info(string)string'] | AlgoRewardsContractArgs['tuple']['get_session_info(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getSessionInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_session_info(string)string', v))
        return this
      },
      /**
       * Add a check_claim_status(string,string)uint64 method call against the AlgoRewardsContract contract
       */
      checkClaimStatus(params: CallParams<AlgoRewardsContractArgs['obj']['check_claim_status(string,string)uint64'] | AlgoRewardsContractArgs['tuple']['check_claim_status(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkClaimStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('check_claim_status(string,string)uint64', v))
        return this
      },
      /**
       * Add a hello(string)string method call against the AlgoRewardsContract contract
       */
      hello(params: CallParams<AlgoRewardsContractArgs['obj']['hello(string)string'] | AlgoRewardsContractArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a mint_nft(string,string,string,string)string method call against the AlgoRewardsContract contract
       */
      mintNft(params: CallParams<AlgoRewardsContractArgs['obj']['mint_nft(string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['mint_nft(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintNft(params)))
        resultMappers.push((v) => client.decodeReturnValue('mint_nft(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a prepare_nft_creation(string,string,string)string method call against the AlgoRewardsContract contract
       */
      prepareNftCreation(params: CallParams<AlgoRewardsContractArgs['obj']['prepare_nft_creation(string,string,string)string'] | AlgoRewardsContractArgs['tuple']['prepare_nft_creation(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.prepareNftCreation(params)))
        resultMappers.push((v) => client.decodeReturnValue('prepare_nft_creation(string,string,string)string', v))
        return this
      },
      /**
       * Add a clear state call to the AlgoRewardsContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AlgoRewardsContractComposer
  }
}
export type AlgoRewardsContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_session(string,string,string,string)string ABI method.
   *
   * Create a new session - Phase 4 enhanced version
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createSession(params?: CallParams<AlgoRewardsContractArgs['obj']['create_session(string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['create_session(string,string,string,string)string']>): AlgoRewardsContractComposer<[...TReturns, AlgoRewardsContractReturns['create_session(string,string,string,string)string'] | undefined]>

  /**
   * Calls the claim_badge(string,string,string,string,string)string ABI method.
   *
   * Claim a badge for attending a session - Phase 4 enhanced version
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimBadge(params?: CallParams<AlgoRewardsContractArgs['obj']['claim_badge(string,string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['claim_badge(string,string,string,string,string)string']>): AlgoRewardsContractComposer<[...TReturns, AlgoRewardsContractReturns['claim_badge(string,string,string,string,string)string'] | undefined]>

  /**
   * Calls the get_session_info(string)string ABI method.
   *
   * Get session information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSessionInfo(params?: CallParams<AlgoRewardsContractArgs['obj']['get_session_info(string)string'] | AlgoRewardsContractArgs['tuple']['get_session_info(string)string']>): AlgoRewardsContractComposer<[...TReturns, AlgoRewardsContractReturns['get_session_info(string)string'] | undefined]>

  /**
   * Calls the check_claim_status(string,string)uint64 ABI method.
   *
   * Check if address has claimed badge for session
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkClaimStatus(params?: CallParams<AlgoRewardsContractArgs['obj']['check_claim_status(string,string)uint64'] | AlgoRewardsContractArgs['tuple']['check_claim_status(string,string)uint64']>): AlgoRewardsContractComposer<[...TReturns, AlgoRewardsContractReturns['check_claim_status(string,string)uint64'] | undefined]>

  /**
   * Calls the hello(string)string ABI method.
   *
   * Keep the original hello method for compatibility
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<AlgoRewardsContractArgs['obj']['hello(string)string'] | AlgoRewardsContractArgs['tuple']['hello(string)string']>): AlgoRewardsContractComposer<[...TReturns, AlgoRewardsContractReturns['hello(string)string'] | undefined]>

  /**
   * Calls the mint_nft(string,string,string,string)string ABI method.
   *
   * Direct NFT minting method for Phase 4 - PREPARES FOR REAL NFT CREATION
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintNft(params?: CallParams<AlgoRewardsContractArgs['obj']['mint_nft(string,string,string,string)string'] | AlgoRewardsContractArgs['tuple']['mint_nft(string,string,string,string)string']>): AlgoRewardsContractComposer<[...TReturns, AlgoRewardsContractReturns['mint_nft(string,string,string,string)string'] | undefined]>

  /**
   * Calls the prepare_nft_creation(string,string,string)string ABI method.
   *
   * Prepare NFT creation parameters - Phase 4 method
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  prepareNftCreation(params?: CallParams<AlgoRewardsContractArgs['obj']['prepare_nft_creation(string,string,string)string'] | AlgoRewardsContractArgs['tuple']['prepare_nft_creation(string,string,string)string']>): AlgoRewardsContractComposer<[...TReturns, AlgoRewardsContractReturns['prepare_nft_creation(string,string,string)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AlgoRewardsContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AlgoRewardsContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AlgoRewardsContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AlgoRewardsContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AlgoRewardsContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AlgoRewardsContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AlgoRewardsContractComposerResults<TReturns>>
}
export type AlgoRewardsContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

