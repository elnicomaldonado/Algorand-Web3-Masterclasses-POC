#!/usr/bin/env python3
"""
Production deployment script for AlgoRewards smart contract
"""

import os
from algokit_utils import AlgorandClient, ApplicationClient
from algosdk import mnemonic, account
from pathlib import Path


def deploy_algorewards_contract():
    """Deploy the production AlgoRewards contract"""
    
    print("🚀 Deploying AlgoRewards Production Contract")
    print("=" * 50)
    
    # Load environment
    try:
        algorand = AlgorandClient.from_environment()
        print("✅ Connected to Algorand network")
    except Exception as e:
        print(f"❌ Failed to connect to Algorand: {e}")
        return None
    
    # Load deployer account
    deployer_mnemonic = os.getenv('DEPLOYER_MNEMONIC')
    if not deployer_mnemonic:
        print("❌ DEPLOYER_MNEMONIC not set in environment")
        return None
    
    try:
        private_key = mnemonic.to_private_key(deployer_mnemonic)
        deployer_address = account.address_from_private_key(private_key)
        print(f"✅ Using deployer address: {deployer_address}")
    except Exception as e:
        print(f"❌ Invalid deployer mnemonic: {e}")
        return None
    
    # Set default signer
    algorand.set_default_signer(deployer_address)
    
    try:
        # Get the contract path
        contract_path = Path(__file__).parent.parent.parent / "smart_contracts" / "algo_rewards_contract"
        
        # Create application client
        app_client = ApplicationClient(
            algod_client=algorand.algod_client,
            app_spec=str(contract_path / "application.json"),  # Will be generated by algokit
            signer=deployer_address,
            sender=deployer_address
        )
        
        # Deploy the application
        print("📦 Deploying contract...")
        deployment_result = app_client.create()
        
        app_id = deployment_result.app_id
        app_address = deployment_result.app_address
        
        print(f"✅ Contract deployed successfully!")
        print(f"   App ID: {app_id}")
        print(f"   App Address: {app_address}")
        print(f"   Deployer: {deployer_address}")
        print(f"   Network: {algorand.algod_client.algod_address}")
        
        # Test the deployment with a simple call
        print("\n🧪 Testing deployment...")
        result = app_client.call("hello", name="Production")
        print(f"✅ Test successful: {result.return_value}")
        
        return {
            "app_id": app_id,
            "app_address": app_address,
            "deployer": deployer_address,
            "transaction_id": deployment_result.tx_id
        }
        
    except Exception as e:
        print(f"❌ Deployment failed: {e}")
        return None


def main():
    """Main deployment function"""
    result = deploy_algorewards_contract()
    
    if result:
        print(f"\n🎉 Deployment completed successfully!")
        print(f"Update your frontend with App ID: {result['app_id']}")
    else:
        print(f"\n❌ Deployment failed")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())